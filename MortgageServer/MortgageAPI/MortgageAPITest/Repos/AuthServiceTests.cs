using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Identity;
using Moq;
using MortgageAPI.Models.Domain;
using MortgageAPI.Repos;
using MortgageAPI.Repos.Interfaces;
using NUnit.Framework;

namespace MortgageAPITest.Repos
{
    [TestFixture]
    public class AuthServiceTests
    {
        private Mock<IUserRepository> _mockUserRepository;
        private Mock<ITokenService> _mockTokenService;
        private AuthService _authService;

        [SetUp]
        public void Setup()
        {
            _mockUserRepository = new Mock<IUserRepository>();
            _mockTokenService = new Mock<ITokenService>();
            _authService = new AuthService(_mockUserRepository.Object, _mockTokenService.Object);
        }

        [Test]
        public async Task AuthenticateAsync_ValidCredentials_ReturnsToken()
        {
            // Arrange
            var username = "validuser";
            var password = "validpassword";
            var user = new User { Username = username };
            var expectedToken = "valid_token";

            _mockUserRepository.Setup(r => r.AuthenticateUserAsync(username, password))
                .ReturnsAsync(user);
            _mockTokenService.Setup(t => t.GenerateToken(user))
                .Returns(expectedToken);

            // Act
            var result = await _authService.AuthenticateAsync(username, password);

            // Assert
            Assert.That(result, Is.EqualTo(expectedToken));
        }

        [Test]
        public async Task AuthenticateAsync_InvalidCredentials_ReturnsNull()
        {
            // Arrange
            var username = "invaliduser";
            var password = "invalidpassword";

            _mockUserRepository.Setup(r => r.AuthenticateUserAsync(username, password))
                .ReturnsAsync((User)null);

            // Act
            var result = await _authService.AuthenticateAsync(username, password);

            // Assert
            Assert.That(result, Is.Null);
        }

        [Test]
        public async Task AuthenticateAsync_EmptyCredentials_ReturnsNull()
        {
            // Arrange
            var username = "";
            var password = "";

            _mockUserRepository.Setup(r => r.AuthenticateUserAsync(username, password))
                .ReturnsAsync((User)null);

            // Act
            var result = await _authService.AuthenticateAsync(username, password);

            // Assert
            Assert.That(result, Is.Null);
        }

        [Test]
        public async Task AuthenticateAsync_NullCredentials_ReturnsNull()
        {
            // Arrange
            string username = null;
            string password = null;

            _mockUserRepository.Setup(r => r.AuthenticateUserAsync(username, password))
                .ReturnsAsync((User)null);

            // Act
            var result = await _authService.AuthenticateAsync(username, password);

            // Assert
            Assert.That(result, Is.Null);
        }

        [Test]
        public async Task AuthenticateAsync_UserRepositoryThrowsException_ThrowsException()
        {
            // Arrange
            var username = "exceptionuser";
            var password = "exceptionpassword";

            _mockUserRepository.Setup(r => r.AuthenticateUserAsync(username, password))
                .ThrowsAsync(new Exception("Database error"));

            // Act & Assert
            Assert.ThrowsAsync<Exception>(async () => await _authService.AuthenticateAsync(username, password));
        }

        [Test]
        public async Task AuthenticateAsync_TokenServiceThrowsException_ThrowsException()
        {
            // Arrange
            var username = "validuser";
            var password = "validpassword";
            var user = new User { Username = username };

            _mockUserRepository.Setup(r => r.AuthenticateUserAsync(username, password))
                .ReturnsAsync(user);
            _mockTokenService.Setup(t => t.GenerateToken(user))
                .Throws(new Exception("Token generation error"));

            // Act & Assert
            Assert.ThrowsAsync<Exception>(async () => await _authService.AuthenticateAsync(username, password));
        }

        [Test]
        public async Task AuthenticateAsync_LongCredentials_HandledCorrectly()
        {
            // Arrange
            var username = new string('a', 1000);
            var password = new string('b', 1000);

            _mockUserRepository.Setup(r => r.AuthenticateUserAsync(username, password))
                .ReturnsAsync((User)null);

            // Act
            var result = await _authService.AuthenticateAsync(username, password);

            // Assert
            Assert.That(result, Is.Null);
        }
    }
}

// Disclaimer: This content is generated by Generative AI.