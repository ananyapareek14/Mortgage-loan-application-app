hi.I have generated some unit tests, but it is not according to the model. modify the spec code according to the model and add some edge cases to the test cases. The model is as follows:

IAmortizationSchedule.ts:
interface IAmortizationSchedule {
  PaymentNumber: number;
  PaymentDate: Date;
  MonthlyPayment: number;
  PrincipalPayment: number;
  InterestPayment: number;
  RemainingBalance: number;
}

interface IAmortizationRequest {
  LoanAmount: number;
  InterestRate: number;
  LoanTermYears: number;
}

export type { IAmortizationSchedule, IAmortizationRequest };

loan-detail.component.spec.ts:
import { TestBed, ComponentFixture } from '@angular/core/testing';
import { LoanDetailsComponent } from './loan-details.component';
import { Store } from '@ngrx/store';
import { ActivatedRoute } from '@angular/router';
import { of } from 'rxjs';
import { ILoan } from '../models/ILoan';
import { IAmortizationSchedule } from '../models/IAmortizationSchedule';
import { loadLoanById } from '../store/loan/loan.actions';
import { loadAmortizationSchedule } from '../store/amortization/amortization.actions';
import { NoopAnimationsModule } from '@angular/platform-browser/animations';

describe('LoanDetailsComponent', () => {
  let component: LoanDetailsComponent;
  let fixture: ComponentFixture<LoanDetailsComponent>;
  let storeMock: jasmine.SpyObj<Store>;
  let routeMock: Partial<ActivatedRoute>;

  beforeEach(() => {
    storeMock = jasmine.createSpyObj('Store', ['dispatch', 'select']);
    routeMock = {
      snapshot: {
        paramMap: {
          get: jasmine.createSpy('get')
        }
      }
    };

    TestBed.configureTestingModule({
      imports: [NoopAnimationsModule],
      declarations: [LoanDetailsComponent],
      providers: [
        { provide: Store, useValue: storeMock },
        { provide: ActivatedRoute, useValue: routeMock }
      ]
    }).compileComponents();

    fixture = TestBed.createComponent(LoanDetailsComponent);
    component = fixture.componentInstance;
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('should initialize observables in constructor', () => {
    storeMock.select.and.returnValue(of(null));
    fixture.detectChanges();
    expect(component.loan$).toBeDefined();
    expect(component.amortizationSchedule$).toBeDefined();
  });

  it('should dispatch actions and calculate summary on ngOnInit with valid loan number', () => {
    const userLoanNumber = 123;
    routeMock.snapshot.paramMap.get.and.returnValue(userLoanNumber.toString());
    const mockSchedule: IAmortizationSchedule[] = [
      { InterestPayment: 100, MonthlyPayment: 500 },
      { InterestPayment: 90, MonthlyPayment: 500 }
    ];
    storeMock.select.and.returnValue(of(mockSchedule));

    component.ngOnInit();

    expect(storeMock.dispatch).toHaveBeenCalledWith(loadLoanById({ userLoanNumber }));
    expect(storeMock.dispatch).toHaveBeenCalledWith(loadAmortizationSchedule({ userLoanNumber }));
    expect(component.totalInterest).toBe(190);
    expect(component.totalPayment).toBe(1000);
    expect(component.monthlyPayment).toBe(500);
  });

  it('should not dispatch actions on ngOnInit with invalid loan number', () => {
    routeMock.snapshot.paramMap.get.and.returnValue(null);

    component.ngOnInit();

    expect(storeMock.dispatch).not.toHaveBeenCalled();
  });

  it('should handle empty amortization schedule', () => {
    routeMock.snapshot.paramMap.get.and.returnValue('123');
    storeMock.select.and.returnValue(of([]));

    component.ngOnInit();

    expect(component.totalInterest).toBe(0);
    expect(component.totalPayment).toBe(0);
    expect(component.monthlyPayment).toBe(0);
  });

  it('should set active tab', () => {
    component.setActiveTab('pie-chart');
    expect(component.activeTab).toBe('pie-chart');
  });

  it('should handle null amortization schedule', () => {
    routeMock.snapshot.paramMap.get.and.returnValue('123');
    storeMock.select.and.returnValue(of(null));

    component.ngOnInit();

    expect(component.totalInterest).toBe(0);
    expect(component.totalPayment).toBe(0);
    expect(component.monthlyPayment).toBe(0);
  });

  it('should handle extremely large numbers in amortization schedule', () => {
    routeMock.snapshot.paramMap.get.and.returnValue('123');
    const largeSchedule: IAmortizationSchedule[] = [
      { InterestPayment: Number.MAX_SAFE_INTEGER, MonthlyPayment: Number.MAX_SAFE_INTEGER },
      { InterestPayment: Number.MAX_SAFE_INTEGER, MonthlyPayment: Number.MAX_SAFE_INTEGER }
    ];
    storeMock.select.and.returnValue(of(largeSchedule));

    component.ngOnInit();

    expect(component.totalInterest).toBe(Number.MAX_SAFE_INTEGER * 2);
    expect(component.totalPayment).toBe(Number.MAX_SAFE_INTEGER * 2);
    expect(component.monthlyPayment).toBe(Number.MAX_SAFE_INTEGER);
  });

  it('should handle negative numbers in amortization schedule', () => {
    routeMock.snapshot.paramMap.get.and.returnValue('123');
    const negativeSchedule: IAmortizationSchedule[] = [
      { InterestPayment: -100, MonthlyPayment: -500 },
      { InterestPayment: -90, MonthlyPayment: -500 }
    ];
    storeMock.select.and.returnValue(of(negativeSchedule));

    component.ngOnInit();

    expect(component.totalInterest).toBe(-190);
    expect(component.totalPayment).toBe(-1000);
    expect(component.monthlyPayment).toBe(-500);
  });
});