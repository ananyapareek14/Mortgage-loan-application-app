hi.I have generated some unit tests, but it is not according to the model. modify the spec code according to the model and add some edge cases to the test cases. The model is as follows:

IRefinance.ts:
interface IRefinance {
  MonthlySavings: number;
  NewPayment: number;
  BreakEvenMonths: number;
  LifetimeSavings: number;
}

interface IRefinanceRequest {
  CurrentLoanAmount: number;
  InterestRate: number;
  CurrentTermMonths: number;
  OriginationYear: number;
  NewLoanAmount: number;
  NewInterestRate: number;
  NewTermMonths: number;
  RefinanceFees: number;
}

export type {IRefinance, IRefinanceRequest}

IAffordability.ts:
interface IAffordability {
    MaxAffordableHomePrice: number;
    EstimatedLoanAmount: number;
    EstimatedMonthlyPayment: number;
    DtiPercentage: number;
    AnnualIncome: number;
    DownPayment: number;
    LoanTermMonths: number;
    InterestRate: number;
    MonthlyDebts: number;
}

interface IAffordabilityRequest {
    AnnualIncome: number;
    DownPayment: number;
    LoanTermMonths: number;
    InterestRate: number;
    MonthlyDebts: number;
}

export type { IAffordability, IAffordabilityRequest };

IDebtToIncome.ts:
interface IDebtToIncome{
    DtiPercentage: number;
    TotalDebts: number;
    ProposedMonthlyPayment: number;
    RemainingMonthlyIncome: number;     
}

interface IDebtToIncomeRequest {
  AnnualIncome: number;
  MinCreditCardPayments: number;
  CarLoanPayments: number;
  StudentLoanPayments: number;
  ProposedMonthlyPayment: number;
  CalculateDefaultPayment: boolean;
}

export type {IDebtToIncome, IDebtToIncomeRequest}

IVaMortgage.ts:
interface IVaMortgageRequest {
  HomePrice: number;
  DownPayment: number;
  InterestRate: number;
  LoanTermYears: number;
}

interface IVaMortgage {
  MonthNumber: number;
  MonthlyPayment: number;
  PrincipalPayment: number;
  InterestPayment: number;
  RemainingBalance: number;
}

export type {IVaMortgage, IVaMortgageRequest}


calculators.service.spec.ts:
import { TestBed } from '@angular/core/testing';
import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';
import { CalculatorService } from './calculator.service';
import { environment } from '../../environment/environment';
import { IAmortizationRequest, IAmortizationSchedule } from '../../models/IAmortizationSchedule';
import { IAffordabilityRequest, IAffordability } from '../../models/IAffordability';
import { IDebtToIncomeRequest, IDebtToIncome } from '../../models/IDebt-To-Income';
import { IRefinanceRequest, IRefinance } from '../../models/IRefinance';
import { IVaMortgageRequest, IVaMortgage } from '../../models/IVaMortgage';

describe('CalculatorService', () => {
  let service: CalculatorService;
  let httpMock: HttpTestingController;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [HttpClientTestingModule],
      providers: [CalculatorService]
    });
    service = TestBed.inject(CalculatorService);
    httpMock = TestBed.inject(HttpTestingController);
  });

  afterEach(() => {
    httpMock.verify();
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });

  describe('calculateAmortization', () => {
    it('should calculate amortization schedule for valid request', () => {
      const mockRequest: IAmortizationRequest = { /* mock data */ };
      const mockResponse: IAmortizationSchedule[] = [{ /* mock data */ }];

      service.calculateAmortization(mockRequest).subscribe(response => {
        expect(response).toEqual(mockResponse);
      });

      const req = httpMock.expectOne(`${environment.apiUrl}/amortization/calculate`);
      expect(req.request.method).toBe('POST');
      req.flush(mockResponse);
    });

    it('should handle empty response', () => {
      const mockRequest: IAmortizationRequest = { /* mock data */ };
      const mockResponse: IAmortizationSchedule[] = [];

      service.calculateAmortization(mockRequest).subscribe(response => {
        expect(response).toEqual([]);
      });

      const req = httpMock.expectOne(`${environment.apiUrl}/amortization/calculate`);
      req.flush(mockResponse);
    });

    it('should handle error response', () => {
      const mockRequest: IAmortizationRequest = { /* mock data */ };
      const mockError = { status: 400, statusText: 'Bad Request' };

      service.calculateAmortization(mockRequest).subscribe(
        () => fail('should have failed with the 400 error'),
        (error) => {
          expect(error.status).toBe(400);
          expect(error.statusText).toBe('Bad Request');
        }
      );

      const req = httpMock.expectOne(`${environment.apiUrl}/amortization/calculate`);
      req.flush('', mockError);
    });
  });

  describe('calculateAffordability', () => {
    it('should calculate affordability for valid request', () => {
      const mockRequest: IAffordabilityRequest = { /* mock data */ };
      const mockResponse: IAffordability = { /* mock data */ };

      service.calculateAffordability(mockRequest).subscribe(response => {
        expect(response).toEqual(mockResponse);
      });

      const req = httpMock.expectOne(`${environment.apiUrl}/affordability/calculate`);
      expect(req.request.method).toBe('POST');
      req.flush(mockResponse);
    });

    it('should handle error response', () => {
      const mockRequest: IAffordabilityRequest = { /* mock data */ };
      const mockError = { status: 500, statusText: 'Internal Server Error' };

      service.calculateAffordability(mockRequest).subscribe(
        () => fail('should have failed with the 500 error'),
        (error) => {
          expect(error.status).toBe(500);
          expect(error.statusText).toBe('Internal Server Error');
        }
      );

      const req = httpMock.expectOne(`${environment.apiUrl}/affordability/calculate`);
      req.flush('', mockError);
    });
  });

  describe('calculateDti', () => {
    it('should calculate debt-to-income ratio for valid request', () => {
      const mockRequest: IDebtToIncomeRequest = { /* mock data */ };
      const mockResponse: IDebtToIncome = { /* mock data */ };

      service.calculateDti(mockRequest).subscribe(response => {
        expect(response).toEqual(mockResponse);
      });

      const req = httpMock.expectOne(`${environment.apiUrl}/debt-to-income/calculate`);
      expect(req.request.method).toBe('POST');
      req.flush(mockResponse);
    });

    it('should handle zero income edge case', () => {
      const mockRequest: IDebtToIncomeRequest = { /* mock data with zero income */ };
      const mockResponse: IDebtToIncome = { /* mock data with infinity or error */ };

      service.calculateDti(mockRequest).subscribe(response => {
        expect(response).toEqual(mockResponse);
      });

      const req = httpMock.expectOne(`${environment.apiUrl}/debt-to-income/calculate`);
      req.flush(mockResponse);
    });
  });

  describe('calculateRefinance', () => {
    it('should calculate refinance for valid request', () => {
      const mockRequest: IRefinanceRequest = { /* mock data */ };
      const mockResponse: IRefinance = { /* mock data */ };

      service.calculateRefinance(mockRequest).subscribe(response => {
        expect(response).toEqual(mockResponse);
      });

      const req = httpMock.expectOne(`${environment.apiUrl}/refinance/calculate`);
      expect(req.request.method).toBe('POST');
      req.flush(mockResponse);
    });

    it('should log backend response', () => {
      const mockRequest: IRefinanceRequest = { /* mock data */ };
      const mockResponse: IRefinance = { /* mock data */ };
      spyOn(console, 'log');

      service.calculateRefinance(mockRequest).subscribe();

      const req = httpMock.expectOne(`${environment.apiUrl}/refinance/calculate`);
      req.flush(mockResponse);

      expect(console.log).toHaveBeenCalledWith('Backend Response:', mockResponse);
    });
  });

  describe('calculateVaMortgage', () => {
    it('should calculate VA mortgage for valid request', () => {
      const mockRequest: IVaMortgageRequest = { /* mock data */ };
      const mockResponse: IVaMortgage[] = [{ /* mock data */ }];

      service.calculateVaMortgage(mockRequest).subscribe(response => {
        expect(response).toEqual(mockResponse);
      });

      const req = httpMock.expectOne(`${environment.apiUrl}/va-mortgage-schedule/calculate`);
      expect(req.request.method).toBe('POST');
      req.flush(mockResponse);
    });

    it('should handle empty response', () => {
      const mockRequest: IVaMortgageRequest = { /* mock data */ };
      const mockResponse: IVaMortgage[] = [];

      service.calculateVaMortgage(mockRequest).subscribe(response => {
        expect(response).toEqual([]);
      });

      const req = httpMock.expectOne(`${environment.apiUrl}/va-mortgage-schedule/calculate`);
      req.flush(mockResponse);
    });
  });
});