hi.I have generated some unit tests, but it is not according to the model. modify the spec code according to the model and add some edge cases to the test cases. The model is as follows:

IRefinance.ts:
interface IRefinance {
  MonthlySavings: number;
  NewPayment: number;
  BreakEvenMonths: number;
  LifetimeSavings: number;
}

interface IRefinanceRequest {
  CurrentLoanAmount: number;
  InterestRate: number;
  CurrentTermMonths: number;
  OriginationYear: number;
  NewLoanAmount: number;
  NewInterestRate: number;
  NewTermMonths: number;
  RefinanceFees: number;
}

export type {IRefinance, IRefinanceRequest}


refinance.selectors.spec.ts:
import { TestBed } from '@angular/core/testing';
import { Store, StoreModule } from '@ngrx/store';
import { selectRefinanceState, selectRefinanceResult, selectRefinanceLoading, selectRefinanceError } from './refinance.selectors';
import { RefinanceState } from './refinance.reducer';

describe('Refinance Selectors', () => {
  let store: Store<{ refinance: RefinanceState }>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [
        StoreModule.forRoot({}),
        StoreModule.forFeature('refinance', {} as any)
      ]
    });

    store = TestBed.inject(Store);
  });

  it('should select the refinance feature state', () => {
    const initialState: RefinanceState = {
      result: null,
      isLoading: false,
      error: null
    };

    let result: RefinanceState | undefined;

    store.select(selectRefinanceState).subscribe(value => {
      result = value;
    });

    store.setState({ refinance: initialState });

    expect(result).toEqual(initialState);
  });

  it('should select the refinance result', () => {
    const mockResult = { amount: 1000 };
    const state: RefinanceState = {
      result: mockResult,
      isLoading: false,
      error: null
    };

    let result: any;

    store.select(selectRefinanceResult).subscribe(value => {
      result = value;
    });

    store.setState({ refinance: state });

    expect(result).toEqual(mockResult);
  });

  it('should select the refinance loading state', () => {
    const state: RefinanceState = {
      result: null,
      isLoading: true,
      error: null
    };

    let isLoading: boolean | undefined;

    store.select(selectRefinanceLoading).subscribe(value => {
      isLoading = value;
    });

    store.setState({ refinance: state });

    expect(isLoading).toBe(true);
  });

  it('should select the refinance error', () => {
    const mockError = 'Test error';
    const state: RefinanceState = {
      result: null,
      isLoading: false,
      error: mockError
    };

    let error: string | null | undefined;

    store.select(selectRefinanceError).subscribe(value => {
      error = value;
    });

    store.setState({ refinance: state });

    expect(error).toBe(mockError);
  });

  it('should handle null state', () => {
    let result: any;
    let isLoading: boolean | undefined;
    let error: string | null | undefined;

    store.select(selectRefinanceResult).subscribe(value => {
      result = value;
    });
    store.select(selectRefinanceLoading).subscribe(value => {
      isLoading = value;
    });
    store.select(selectRefinanceError).subscribe(value => {
      error = value;
    });

    store.setState({ refinance: null as any });

    expect(result).toBeUndefined();
    expect(isLoading).toBeUndefined();
    expect(error).toBeUndefined();
  });

  it('should handle empty state', () => {
    let result: any;
    let isLoading: boolean | undefined;
    let error: string | null | undefined;

    store.select(selectRefinanceResult).subscribe(value => {
      result = value;
    });
    store.select(selectRefinanceLoading).subscribe(value => {
      isLoading = value;
    });
    store.select(selectRefinanceError).subscribe(value => {
      error = value;
    });

    store.setState({ refinance: {} as any });

    expect(result).toBeUndefined();
    expect(isLoading).toBeUndefined();
    expect(error).toBeUndefined();
  });

  it('should handle state changes', () => {
    let result: any;
    let isLoading: boolean | undefined;
    let error: string | null | undefined;

    store.select(selectRefinanceResult).subscribe(value => {
      result = value;
    });
    store.select(selectRefinanceLoading).subscribe(value => {
      isLoading = value;
    });
    store.select(selectRefinanceError).subscribe(value => {
      error = value;
    });

    // Initial state
    store.setState({
      refinance: {
        result: null,
        isLoading: false,
        error: null
      }
    });

    expect(result).toBeNull();
    expect(isLoading).toBe(false);
    expect(error).toBeNull();

    // Update state
    store.setState({
      refinance: {
        result: { amount: 2000 },
        isLoading: true,
        error: 'New error'
      }
    });

    expect(result).toEqual({ amount: 2000 });
    expect(isLoading).toBe(true);
    expect(error).toBe('New error');
  });
});